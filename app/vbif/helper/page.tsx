"use client";

import Row from "react-bootstrap/Row";
import Col from "react-bootstrap/Col";
// import Container from "react-bootstrap/Container";
// import { useEffect, useState } from "react";
import Form from "react-bootstrap/Form";
import styles from "./styles.module.css";
import Table from "react-bootstrap/Table";
import Button from "react-bootstrap/Button";
import { useState, Dispatch, SetStateAction } from "react";

import { TargetLayerEntry, TargetLayerRow } from "./target-list";
import Accordion from "react-bootstrap/Accordion";

const macroTextStart = `
# Macro generated by HDG helper
# \
# Can be run in batch, without graphic
# or interactively: Idle> /control/execute macroname.mac
#
# Change the default number of workers (in multi-threading mode) 
# /run/numberOfThreads 12
#
# Initialize kernel
/run/initialize
`;

export default function HelperPage() {
  // const [TargetList, setTargetList] = useState<Array<TargetLayerInfo>>(); //1
  // Target Information

  // General Particle Source
  // Output Information
  const formlsize: number = 3;
  const formrsize: number = 9;

  // # /control/verbose 2
  // # /run/verbose 2
  // #/event/verbose 0
  // #/tracking/verbose 1
  const [TargetLayers, setTargetLayers] = useState<TargetLayerEntry[]>([]);
  const [BeamParticle, setBeamParticle] = useState("geantino");
  const [BeamEnergy, setBeamEnergy] = useState(0);
  const [BeamEnergyUnit, setBeamEnergyUnit] = useState("eV");
  const [NBeamOn, setNBeamOn] = useState(0);

  const [VerboseDetail, setVerboseDetail] = useState(true);
  const [VerboseDetailControl, setVerboseDetailControl] = useState(0);
  const [VerboseDetailRun, setVerboseDetailRun] = useState(0);
  const [VerboseDetailEvent, setVerboseDetailEvent] = useState(0);
  const [VerboseDetailTracking, setVerboseDetailTracking] = useState(0);
  const minVerbose = -1;
  const maxVerbose = 5;

  function changeTargetLayer(index: number, value: TargetLayerEntry) {
    const newFields = [...TargetLayers];
    newFields[index] = value;
    setTargetLayers(newFields);
  }

  const rangeOfNumbers = (a: number, b: number) =>
    [...Array(b - a)].map((_, i) => i + a + 1);

  function VerboseLevelMeter(props: {
    name: string;
    description?: string;
    value: number;
    setValue: Dispatch<SetStateAction<number>>;
  }) {
    return (
      <Row>
        <Form.Group>
          <Row md={2}>
            <Form.Label column sm={1}>
              {props.name}
            </Form.Label>
            <Row>
              <Row md={5}>
                {rangeOfNumbers(minVerbose, maxVerbose).map(v => (
                  <Col key={`${props.name}-${v}`} md={1}>
                    <Form.Check
                      type={"radio"}
                      label={v}
                      value={v}
                      name={`radio-${props.name}`}
                      checked={props.value == v}
                      onChange={v =>
                        props.setValue(Number(v.currentTarget.value))
                      }
                    />
                  </Col>
                ))}
              </Row>
              {props.description ? (
                <Row>
                  <Form.Text style={{ textAlign: "left" }}>asdf</Form.Text>
                </Row>
              ) : (
                <></>
              )}
            </Row>
          </Row>
        </Form.Group>
      </Row>
    );
  }

  const macroTextTargetLayer = TargetLayers.filter(v => (v.thickness ?? 0) > 0)
    .map(
      (v, i) =>
        "/DET/addlayer/" +
        (v.scored ? "scoring" : "target") +
        " " +
        v.matname +
        " " +
        v.thickness +
        " " +
        v.unit +
        " # layer " +
        (i + 1) +
        ", " +
        (v.scored ? "scoring" : "normal"),
    )
    .join("\n");

  const outText = [
    macroTextStart,
    VerboseDetail
      ? [
          "# Verbosity Setup",
          `/control/verbose ${VerboseDetailControl}`,
          `/run/verbose ${VerboseDetailRun}`,
          `/event/verbose ${VerboseDetailEvent}`,
          `/tracking/verbose ${VerboseDetailTracking}`,
        ].join("\n")
      : "",
    "\n# Start Geometry Construction",
    macroTextTargetLayer,
    "\n# Particle Setup",
    `/gun/particle ${BeamParticle}`,
    `/gun/ene ${BeamEnergy} ${BeamEnergyUnit}`,
    "\n# Beam On",
    NBeamOn ? "/run/beamOn " + NBeamOn : "",
  ].join("\n");

  const handleDownload = () => {
    const content = outText; // Set your variable text here
    const datetime = new Date();
    const fileName = `${datetime.valueOf()}.mac`; // Name of the file to be downloaded

    // Create a blob with the content
    const blob = new Blob([content], { type: "text/plain" });
    const url = URL.createObjectURL(blob);

    // Create a temporary anchor element
    const a = document.createElement("a");
    a.href = url;
    a.download = fileName;

    // Trigger the download by simulating a click
    a.click();

    // Clean up the URL object
    URL.revokeObjectURL(url);
  };

  const handleClipboard = () => {
    navigator.clipboard.writeText(outText);
  };

  return (
    <>
      <Row
        style={{
          display: "flex",
          flexDirection: "column",
          alignItems: "center",
        }}
      >
        <Col style={{ display: "block" }} sm={12} md={10} lg={9} xl={9} xxl={9}>
          <Row className={styles.RowAllBox}>
            <Row className={styles.RowBox}>
              <h3>입자 정보 입력</h3>
              {/* 방사선 종류 */}
              <Form.Group as={Row}>
                <Form.Label column sm={formlsize}>
                  방사선 종류
                </Form.Label>
                <Col sm={formrsize}>
                  <Form.Select
                    onChange={v => setBeamParticle(v.currentTarget.value)}
                  >
                    {[
                      { name: "클릭하여 선택", value: undefined },
                      { name: "양성자(p)", value: "p" },
                      { name: "전자(e-)", value: "e-" },
                      { name: "양전자(e+)", value: "e+" },
                      { name: "중성자(n)", value: "n" },
                      { name: "감마선(gamma)", value: "gamma" },
                    ].map(value => (
                      <option
                        key={`particle-${value.value}`}
                        value={value.value}
                      >
                        {value.name}
                      </option>
                    ))}
                  </Form.Select>
                  <Form.Text style={{ textAlign: "left" }}>
                    입사할 방사선의 종류를 선택
                  </Form.Text>
                </Col>
              </Form.Group>
              {/* 방사선의 에너지 */}
              <Form.Group as={Row}>
                <Form.Label column sm={formlsize}>
                  방사선 에너지
                </Form.Label>
                <Col sm={formrsize}>
                  <Row>
                    <Col sm={8}>
                      <Form.Control
                        onChange={v =>
                          setBeamEnergy(Number(v.currentTarget.value) ?? 0)
                        }
                      />
                    </Col>
                    <Col sm={4}>
                      <Form.Select
                        onChange={v => setBeamEnergyUnit(v.currentTarget.value)}
                      >
                        {/* eV keV MeV GeV TeV PeV J electronvolt kiloelectronvolt megaelectronvolt gigaelectronvolt teraelectronvolt petaelectronvolt joule */}
                        {[
                          { name: "클릭하여 선택", value: undefined },
                          { name: "eV", value: "eV" },
                          { name: "keV", value: "keV" },
                          { name: "MeV", value: "MeV" },
                          { name: "GeV", value: "GeV" },
                          { name: "TeV", value: "TeV" },
                          { name: "PeV", value: "PeV" },
                          { name: "J", value: "J" },
                        ].map(value => (
                          <option
                            key={`particle-${value.value}`}
                            value={value.value}
                          >
                            {value.name}
                          </option>
                        ))}
                      </Form.Select>
                    </Col>
                  </Row>
                  <Form.Text style={{ textAlign: "left" }}>
                    방사선 입자의 에너지와 에너지의 단위 선택
                  </Form.Text>
                </Col>
              </Form.Group>
              <Form.Group as={Row}>
                <Form.Label column sm={formlsize}>
                  입자의 갯수
                </Form.Label>
                <Col sm={formrsize}>
                  <Row>
                    <Col>
                      <Form.Control
                        onChange={v =>
                          setNBeamOn(Number(v.currentTarget.value))
                        }
                      />
                    </Col>
                  </Row>
                  <Form.Text style={{ textAlign: "left" }}>
                    입사할 입자의 갯수를 입력
                  </Form.Text>
                </Col>
              </Form.Group>
            </Row>
            <Row className={styles.RowBox}>
              <h3>표적 정보 입력</h3>
              <Row>
                <Table responsive>
                  <thead>
                    <tr>
                      <th>순서</th>
                      <th>물질명</th>
                      <th>두께</th>
                      <th>단위</th>
                      <th>기록층</th>
                    </tr>
                  </thead>
                  <tbody>
                    {TargetLayers.map((v, i) => (
                      <TargetLayerRow
                        key={`Targetlayerrow-${i}`}
                        n={i}
                        value={v}
                        setValue={changeTargetLayer}
                      />
                    ))}
                  </tbody>
                </Table>
                <Row md={2}>
                  <Col>
                    <Button
                      style={{ width: 100 + "%" }}
                      onClick={() => {
                        setTargetLayers(v => [
                          ...v,
                          {
                            matname: "",
                            thickness: 0,
                            unit: "um",
                            scored: false,
                          },
                        ]);
                      }}
                    >
                      표적 층 추가하기
                    </Button>
                  </Col>
                  <Col>
                    <Button
                      disabled={TargetLayers.length < 1}
                      style={{ width: 100 + "%" }}
                      onClick={() => {
                        setTargetLayers(v => v.slice(0, -1));
                      }}
                    >
                      표적 층 제거하기
                    </Button>
                  </Col>
                </Row>
              </Row>
            </Row>
          </Row>
          <Row className={styles.RowBox}>
            <h3>
              과정 출력 상세 설정{" "}
              <Button onClick={() => setVerboseDetail(v => !v)}>
                {!VerboseDetail ? "설정하기" : "설정 해제하기"}
              </Button>
            </h3>
            {VerboseDetail ? (
              <>
                <VerboseLevelMeter
                  name="Control"
                  value={VerboseDetailControl}
                  setValue={setVerboseDetailControl}
                />
                <VerboseLevelMeter
                  name="Run"
                  value={VerboseDetailRun}
                  setValue={setVerboseDetailRun}
                />
                <VerboseLevelMeter
                  name="Event"
                  value={VerboseDetailEvent}
                  setValue={setVerboseDetailEvent}
                />
                <VerboseLevelMeter
                  name="Tracking"
                  value={VerboseDetailTracking}
                  setValue={setVerboseDetailTracking}
                />
              </>
            ) : (
              <></>
            )}
          </Row>
          <Row className={styles.RowBox}>
            <h3>매크로 출력</h3>
            <Row>
              <Col>
                <Button onClick={handleClipboard} style={{ width: 100 + "%" }}>
                  클릭하여 복사하기
                </Button>
              </Col>
              <Col>
                <Button onClick={handleDownload} style={{ width: 100 + "%" }}>
                  매크로 다운로드{" "}
                </Button>
              </Col>
            </Row>

            <Row style={{ padding: 1 + "em" }}>
              <Form.Control
                type="textarea"
                as={Row}
                disabled
                style={{
                  textAlign: "left",
                  whiteSpace: "pre-wrap",
                  minHeight: 5 + "em",
                }}
              >
                {outText}
              </Form.Control>
            </Row>
          </Row>
        </Col>

        <Row>
          <Accordion defaultActiveKey="0">
            <Accordion.Item eventKey="0">
              <Accordion.Header>출력값</Accordion.Header>
              <Accordion.Body>ㅁㄴㅇㄹ</Accordion.Body>
            </Accordion.Item>
          </Accordion>
        </Row>
      </Row>
    </>
  );
}
